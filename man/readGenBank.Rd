% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genbankReader.R
\name{readGenBank}
\alias{readGenBank}
\title{Read a GenBank File}
\usage{
readGenBank(file, text = readLines(file), partial = NA, ret.seq = TRUE,
  verbose = FALSE)
}
\arguments{
\item{file}{character or GBAccession. The path to the file, or a GBAccession object containing Nuccore versioned accession numbers. Ignored if \code{text} is specified.}

\item{text}{character. The text of the file. Defaults to text within \code{file}}

\item{partial}{logical. If TRUE, features with non-exact boundaries will
be included. Otherwise, non-exact features are excluded, with a warning
if \code{partial} is \code{NA} (the default).}

\item{ret.seq}{logical. Should an object containing the raw ORIGIN sequence be
created and returned. Defaults to \code{TRUE}. If \code{FALSE},
the sequence slot is set to \code{NULL}. See NOTE.}

\item{verbose}{logical. Should informative messages be printed to the
console as the file is processed. Defaults to \code{FALSE}.}
}
\value{
A \code{GenBankRecord} object containing (most,
see detaisl) of the information within \code{file}/\code{text} Or a list of
\code{GenBankRecord} objects in cases where a
\code{GBAccession} vector with more than one ID in it is passed to \code{file}
}
\description{
Read a GenBank file from a local file, or retrieve
and read one based on an accession number. See Details for exact
behavior.
}
\details{
If a a \code{GBAccession} object is passed to \code{file}, the
rentrez package is used to attempt to fetch full GenBank records for all
ids in the 

Often times, GenBank files don't contain exhaustive annotations.
For example, files including CDS annotations often do not have separate
transcript features.  Furthermore, chromosomes are not always named,
particularly in organisms that have only one. The details of how genbankr
handles such cases are as follows:

In files where CDSs are annotated but individual exons are not, 'approximate
exons' are defined as the individual contiguous elements within each CDS.
Currently, no mixing of approximate and explicitly annotated exons is
performed, even in cases where, e.g., exons are not annotated for some
genes with CDS annotations.

In files where transcripts are not present, 'approximate transcripts'
defined by the ranges spanned by groups of exons are used.  Currently, we do
not support generating approximate transcripts from CDSs in files that
contain actual transcript annotations, even if those annotations do not
cover all genes with CDS/exon annotations.


Features  (gene, cds, variant, etc) are assumed to be contained within the
most recent previous source feature (chromosome/physical piece of DNA).
Chromosome name for source features (seqnames in the resulting
\code{GRanges}/\code{VRanges} is determined  as follows:
\enumerate{
\item{The 'chromosome' attribute, as is (e.g., "chr1");}
\item{the 'strain' attribute, combined with auto-generated count (e.g.,
"VR1814:1");}
\item{the 'organism' attribute, combined with auto-generated count (e.g.
"Human herpesvirus 5:1".}
}

In files where no origin sequence is present, importing varation
features is not currently supported, as there is no easy/
self-contained way of determining the reference in those
situations and the features themselves list only alt. If
variation features are present in a file without origin
sequence, those features are ignored with a warning.

Currently some information about from the header of a GenBank file,
primarily reference and author based information, is not captured and
returned. Please contact the maintainer if you have a direct use-case for
this type of information.
}
\note{
We have endeavored to make this parser as effcient as easily possible.
On our local machines, a 19MB genbank file takes 2-3 minutes to be parsed.
That said, this function is not tested and likely not suitable for
processing extremely large genbank files.

The origin sequence is always parsed when calling readGenBank, because
it is necessary to generate a VRanges from variant features. So currently
\code{ret.seq=FALSE} will not reduce parsing time, or maximum memory usage,
though it will reduce memory usage by the final GenBankRecord object. The
lower-level parseGenBank does skil parsing the sequence at all via
\code{ret.seq=FALSE}, but variant annotations will be excluded if
make_gbrecord is called on the resulting parsed list.
}
\examples{
gb = readGenBank(system.file("sample.gbk", package="genbankr"))
}

